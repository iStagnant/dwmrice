# Setting opts
set shell zsh
set shellopts '-eu'
set ifs '\n'
set scrolloff 10
set icons
set period 1
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/clear
set autoquit true

#Commands defining
#Shows progress of copying and pasting
cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd mkdir %IFS=" "; mkdir -p -- "$*"

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $fx
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd setbg "$1"

#Keybindings
map r
map i rename #before ext
map I :rename; cmd-home #at very beginning
map A :rename; cmd-end #at very end
map c :rename; cmd-delete-home #change file name while keeping ext
map C :rename; cmd-end; cmd-delete-home #change file name
map R bulk-rename

map E extract
map D delete
map b &setbg $f
map <c-n> push :mkdir<space>
map <c-r> reload
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard #Yank path
